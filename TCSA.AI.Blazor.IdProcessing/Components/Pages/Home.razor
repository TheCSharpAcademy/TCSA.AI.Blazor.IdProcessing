@page "/";
@using Azure
@using Azure.AI.FormRecognizer.DocumentAnalysis
@using Azure.Storage.Blobs
@using TCSA.AI.Blazor.IdProcessing.Components.Layout
@using TCSA.AI.Blazor.IdProcessing.Data
@using TCSA.AI.Blazor.IdProcessing.Services
@layout MainLayout
@rendermode InteractiveServer

@inject IConfiguration Configuration
@inject IDocumentIntelligenceService DocumentIntelligenceService
@inject IDocumentTranslationService DocumentTranslationService
@inject IGuestsService GuestsService

<div class="container mt-5">

    <div class="dropzone @(isDragging ? "dragging" : "border border-primary rounded p-4 text-center bg-light")"
         @ondragover="OnDragOver"
         @ondragleave="OnDragLeave"
         @ondrop="OnDrop">
        <p class="mb-3">Drag and drop files here or click to upload.</p>
        <InputFile OnChange="HandleFileSelection" multiple class="form-control" />
    </div>

    @if (files.Count > 0)
    {
        <div class="mt-4">
            <h5>Selected Files:</h5>
            <ul class="list-group mb-3">
                @foreach (var file in files)
                {
                    <li class="list-group-item">
                        <strong>@file.Name</strong> (@file.Size / 1024) KB
                    </li>
                }
            </ul>
            <button class="btn btn-primary" @onclick="UploadFiles">Upload Files</button>
        </div>
    }

    <p class="text-success mt-3">@uploadStatus</p>

    <h3 class="mt-5">Guests List</h3>
    @if (guests == null)
    {
        <p class="text-info">Loading guests...</p>
    }
    else if (!guests.Any())
    {
        <p class="text-warning">No guests found.</p>
    }
    else
    {
        <table class="table table-striped table-hover mt-4">
            <thead class="table-dark">
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>DOB</th>
                    <th>Address</th>
                    <th>Country</th>
                    <th>Check-In Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var guest in guests)
                {
                    <tr>
                        <td>@guest.FirstName</td>
                        <td>@guest.LastName</td>
                        <td>@guest.DateOfBirth.ToShortDateString()</td>
                        <td>@guest.Address</td>
                        <td>@guest.Country</td>
                        <td>@guest.CheckInDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>


<style>
    .dropzone {
        border: 2px dashed #0078d7;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .dropzone.dragging {
            background-color: #e6f7ff;
        }
</style>

@code {
    private bool isDragging = false;
    private string uploadStatus = string.Empty;
    private readonly List<IBrowserFile> files = new();
    private List<Guest> guests = null;

    protected override async Task OnInitializedAsync()
    {
        guests = await GuestsService.GetGuestsAsync();
    }

    private void OnDragOver()
    {
        isDragging = true;
    }

    private void OnDragLeave()
    {
        isDragging = false;
    }

    private void OnDrop()
    {
        isDragging = false;
    }

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        files.Clear(); // Clear previously selected files
        files.AddRange(e.GetMultipleFiles());
    }

    private async Task UploadFiles()
    {
        if (files.Count == 0)
        {
            uploadStatus = "No files selected.";
            return;
        }

        uploadStatus = "Uploading...";
        foreach (var file in files)
        {
            var guest = await DocumentIntelligenceService.ExtractDataFromId(file);
            await GuestsService.AddGuestAsync(guest);
            //await DocumentTranslationService.TranslateDocument(file);
        }

        guests = await GuestsService.GetGuestsAsync();

        uploadStatus = "All files uploaded successfully!";
        files.Clear(); // Clear the list after upload
    }

    private async Task UploadToBlobStorage(IBrowserFile file)
    {
        try
        {
            var connectionString = Configuration["BlobStorage:ConnectionString"];
            var containerName = Configuration["BlobStorage:ContainerName"];

            var blobServiceClient = new BlobServiceClient(connectionString);
            var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);

            await blobContainerClient.CreateIfNotExistsAsync();

            var blobClient = blobContainerClient.GetBlobClient(file.Name);

            await using var stream = file.OpenReadStream(10 * 1024 * 1024); // 10 mb limit
            await blobClient.UploadAsync(stream, true);
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error: {ex.Message}";
        }
    }
}
