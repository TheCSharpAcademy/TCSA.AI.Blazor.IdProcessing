@page "/";
@using Azure
@using Azure.AI.FormRecognizer.DocumentAnalysis
@using Azure.Storage.Blobs
@using TCSA.AI.Blazor.IdProcessing.Components.Layout
@layout MainLayout
@rendermode InteractiveServer

@inject IConfiguration Configuration

<div class="dropzone @(isDragging ? "dragging" : "")"
@ondragover="OnDragOver"
@ondragleave="OnDragLeave"
@ondrop="OnDrop">
    Drag and drop files here or click to upload.
    <InputFile OnChange="HandleFileSelection" multiple />
</div>

@if (files.Count > 0)
{
    <div>
        <p>Selected Files:</p>
        <ul>
            @foreach (var file in files)
            {
                <li>@file.Name (@file.Size / 1024) KB</li>
            }
        </ul>
        <button @onclick="UploadFiles">Upload Files</button>
    </div>
}

<p>@uploadStatus</p>

<style>
    .dropzone {
    border: 2px dashed #0078d7;
    padding: 20px;
    text-align: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    }

    .dropzone.dragging {
    background-color: #e6f7ff;
    }
</style>

@code {
    private bool isDragging = false;
    private string uploadStatus = string.Empty;
    private readonly List<IBrowserFile> files = new();

    private void OnDragOver()
    {
        isDragging = true;
    }

    private void OnDragLeave()
    {
        isDragging = false;
    }

    private void OnDrop()
    {
        isDragging = false;
    }

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        files.Clear(); // Clear previously selected files
        files.AddRange(e.GetMultipleFiles());
    }

    private async Task UploadFiles()
    {
        if (files.Count == 0)
        {
            uploadStatus = "No files selected.";
            return;
        }

        uploadStatus = "Uploading...";
        foreach (var file in files)
        {
            await ExtractDataFromId(file);
        }
        uploadStatus = "All files uploaded successfully!";
        files.Clear(); // Clear the list after upload
    }

    private async Task ExtractDataFromId(IBrowserFile file)
    {
        try
        {
            string endpoint = Configuration["Values:AzureEndpoint"];
            string apiKey = Configuration["Values:AzureKey"];

            var client = new DocumentAnalysisClient(new Uri(endpoint), new AzureKeyCredential(apiKey));

            // Upload the file stream
            await using var nonSeekableStream = file.OpenReadStream(10 * 1024 * 1024); // 10 MB limit
            using var seekableStream = new MemoryStream();
            await nonSeekableStream.CopyToAsync(seekableStream);
            seekableStream.Position = 0; // Reset po

            // Analyze the ID document using the prebuilt model
            AnalyzeDocumentOperation operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "prebuilt-idDocument", seekableStream);
            AnalyzeResult result = operation.Value;

            // Extract specific fields
            var idDocument = result.Documents.FirstOrDefault();
            if (idDocument != null)
            {
                Console.WriteLine("Fields identified in the document:");
                foreach (var field in idDocument.Fields)
                {
                    string fieldName = field.Key; // Field name (e.g., "FullName", "DateOfBirth")
                    var fieldValue = field.Value?.Content; // Extracted value of the field
                    Console.WriteLine($"{fieldName}: {fieldValue}");
                }
            }
            else
            {
                Console.WriteLine("No ID document data extracted.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task UploadToBlobStorage(IBrowserFile file)
    {
        try
        {
            var connectionString = Configuration["BlobStorage:ConnectionString"];
            var containerName = Configuration["BlobStorage:ContainerName"];

            var blobServiceClient = new BlobServiceClient(connectionString);
            var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);

            await blobContainerClient.CreateIfNotExistsAsync();

            var blobClient = blobContainerClient.GetBlobClient(file.Name);

            await using var stream = file.OpenReadStream(10 * 1024 * 1024); // 10 mb limit
            await blobClient.UploadAsync(stream, true);
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error: {ex.Message}";
        }
    }
}
